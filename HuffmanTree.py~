#encoding=utf-8
import heapq
from HuffmanNode import *
class HuffmanTree(object):
    def __init__(self,root=None):
          pass


# def encode():
#      pass
def createNodes():
      docStr="DDaaaabbbbbccccccc"
      nodeDic={}
      for i in docStr:
          try:
            temp= nodeDic[i]
            temp.setWeight(temp.getWeight()+1)
          except KeyError:
            nodeDic[i]=HuffmanTreeNode(1,i)
      allNodes=nodeDic.values()
      # help(sorted)
      def com(x,y):
          if x.weight-y.weight:
              return 1
          else:
              return 0
      all1=sorted(allNodes,key=lambda x:x.weight,reverse=False)
      # print all1[3].weight
      # help(list)
      while len(all1)>1:
          temp=HuffmanTreeNode()
          temp1=all1.pop(0)
          temp2=all1.pop(0)
          temp.setLeftChild(temp1)
          temp.setRightChild(temp2)
          all1.append(temp)
          all1=sorted(all1,key=lambda x:x.weight,reverse=False)
      # print len(all1)
      print all1[0].weight
      #     print all1.pop(0).value


      # print b.value,b.weight
createNodes()


#############################

class HuffmanCompress(object):
    def __init__(self,doc="dddcccccabbeeee"):
        self.doc=doc
        self.root=self.createHuffmanNodes()
        self.codeDic={}
        self.parseCodeDic(self.root,"")
        print self.codeDic
        pass
    def createHuffmanNodes(self):
        nodeDic={}
        for i in self.doc:
            try:
                temp=nodeDic[i]
                temp.setWeight(temp.getWeight()+1)
            except:
                nodeDic[i]=HuffmanTreeNode(1,i)
        # print nodeDic
        allNodes=nodeDic.values()
        allNodes=sorted(allNodes,key=lambda x:x.weight,reverse=False)
        # print allNodes[2].value
        while len(allNodes)>1:
            temp=HuffmanTreeNode()
            temp1=allNodes.pop(0)
            temp2=allNodes.pop(0)
            temp.setLeftChild(temp1)
            temp.setRightChild(temp2)
            allNodes.append(temp)
            allNodes=sorted(allNodes,key=lambda x:x.weight,reverse=False)
        # print allNodes[0].weight
        return allNodes[0]
    def parseCodeDic(self,currentNode,code=""):
        if currentNode==None:
            return
        else:
            if currentNode.getValue()!=None:
                self.codeDic[currentNode.value]=code
            self.parseCodeDic(currentNode.left,code+"0")
            self.parseCodeDic(currentNode.right,code+"1")
    def convertToBinary(self):
        binstr=""
        self.doc="aa"
        for x in self.doc:
            binstr+=self.codeDic[x]
        return binstr
    def writeFile(self):
        output=open("data.bin","wb")
        pickle.dump(self.codeDic,output,2)
        pickle.dump(self.convertToBinary(),output,2)
        output.close()
    def decodeFile(self,doc):
        pass
